{"ast":null,"code":"import _slicedToArray from \"/Users/kevinschroeder/Documents/REACT-Resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kevinschroeder/Documents/REACT-Resume/src/components/ProjectCard/ProjectCard.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Grid, Chip } from \"@material-ui/core\";\nimport { Card, CardActions, CardContent, CardMedia, Typography, IconButton } from \"@material-ui/core\";\nimport { Info, Launch, GitHub } from \"@material-ui/icons\";\nimport InfoModal from \"../InfoModal/InfoModal\";\nimport \"./ProjectCard.scss\";\nexport default function ProjectCard({\n  project\n}) {\n  // ref for the description node\n  const desRef = React.createRef();\n\n  const _useState = useState(project.des),\n        _useState2 = _slicedToArray(_useState, 2),\n        des = _useState2[0],\n        setDes = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        modalOpen = _useState4[0],\n        setModalOpen = _useState4[1];\n\n  const updateDes = () => {\n    /* project.des.length is the no. of characters in the original description\n     * but due to card height being fixed, if the description is too long, it must\n     * be trimed. By measuring no. of characters and width of the description at several widths, I found\n     * description width = 1.3 * no. of characters (approx). The following math is a result of this.\n     * desRef.current.offsetWidth is the width of the description element. Used 13 instead of 1.3,\n     * by multipling both sides by 10. Also using 14.5 instead of 13 in division when calculating the\n     * length of the substring because 13 is not exact and sometimes the substring was still bigger.\n     * Hence, made it a little smaller by dividing by a 15 instead of 13.\n     */\n    setDes(project.des.length * 13 <= desRef.current.offsetWidth * 10 ? project.des : project.des.slice(0, desRef.current.offsetWidth * 10 / 15).trim() + \"...\");\n  }; // This runs after render\n\n\n  useEffect(() => {\n    updateDes(); // Update (trim) the description\n\n    window.addEventListener(\"resize\", updateDes); // Update the des on resizing\n\n    return () => window.removeEventListener(\"resize\", updateDes); // Unsubscribe\n  });\n\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n\n  return React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    md: 4,\n    lg: 3,\n    xl: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(CardMedia, {\n    component: \"img\",\n    className: \"project-image\",\n    alt: project.title,\n    image: project.image,\n    title: project.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h6\",\n    component: \"h2\",\n    className: \"one-line\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, project.title), React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"p\",\n    className: \"description\",\n    ref: desRef,\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, des), React.createElement(\"div\", {\n    className: \"chip-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, project.tags.map((label, i) => React.createElement(Chip, {\n    className: \"chip\",\n    size: \"small\",\n    label: label,\n    color: \"primary\",\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  })))), React.createElement(CardActions, {\n    disableSpacing: true,\n    className: \"card-actions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    title: \"More Info\",\n    \"aria-label\": \"More Info\",\n    onClick: handleOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Info, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })), modalOpen ? React.createElement(InfoModal, {\n    project: project,\n    handleClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }) // Modal\n  : null, React.createElement(IconButton, {\n    title: \"Launch App\",\n    \"aria-label\": \"Launch Application\",\n    href: project.links.launch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(Launch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })), React.createElement(IconButton, {\n    title: \"See Code\",\n    \"aria-label\": \"Source Code On Github\",\n    href: project.links.github,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(GitHub, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  })))));\n}","map":{"version":3,"sources":["/Users/kevinschroeder/Documents/REACT-Resume/src/components/ProjectCard/ProjectCard.js"],"names":["React","useEffect","useState","Grid","Chip","Card","CardActions","CardContent","CardMedia","Typography","IconButton","Info","Launch","GitHub","InfoModal","ProjectCard","project","desRef","createRef","des","setDes","modalOpen","setModalOpen","updateDes","length","current","offsetWidth","slice","trim","window","addEventListener","removeEventListener","handleClose","handleOpen","title","image","tags","map","label","i","links","launch","github"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Grid, Chip } from \"@material-ui/core\";\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  CardMedia,\n  Typography,\n  IconButton\n} from \"@material-ui/core\";\nimport { Info, Launch, GitHub } from \"@material-ui/icons\";\nimport InfoModal from \"../InfoModal/InfoModal\";\nimport \"./ProjectCard.scss\";\n\nexport default function ProjectCard({ project }) {\n  // ref for the description node\n  const desRef = React.createRef();\n  const [des, setDes] = useState(project.des);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const updateDes = () => {\n    /* project.des.length is the no. of characters in the original description\n     * but due to card height being fixed, if the description is too long, it must\n     * be trimed. By measuring no. of characters and width of the description at several widths, I found\n     * description width = 1.3 * no. of characters (approx). The following math is a result of this.\n     * desRef.current.offsetWidth is the width of the description element. Used 13 instead of 1.3,\n     * by multipling both sides by 10. Also using 14.5 instead of 13 in division when calculating the\n     * length of the substring because 13 is not exact and sometimes the substring was still bigger.\n     * Hence, made it a little smaller by dividing by a 15 instead of 13.\n     */\n    setDes(\n      project.des.length * 13 <= desRef.current.offsetWidth * 10\n        ? project.des\n        : project.des.slice(0, (desRef.current.offsetWidth * 10) / 15).trim() +\n            \"...\"\n    );\n  };\n\n  // This runs after render\n  useEffect(() => {\n    updateDes(); // Update (trim) the description\n    window.addEventListener(\"resize\", updateDes); // Update the des on resizing\n    return () => window.removeEventListener(\"resize\", updateDes); // Unsubscribe\n  });\n\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n\n  return (\n    <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\n      <Card>\n        <CardMedia\n          component=\"img\"\n          className=\"project-image\"\n          alt={project.title}\n          image={project.image}\n          title={project.title}\n        />\n        <CardContent>\n          <Typography\n            gutterBottom\n            variant=\"h6\"\n            component=\"h2\"\n            className=\"one-line\"\n          >\n            {project.title}\n          </Typography>\n          <Typography\n            variant=\"body2\"\n            component=\"p\"\n            className=\"description\"\n            ref={desRef}\n            gutterBottom\n          >\n            {des}\n          </Typography>\n          <div className=\"chip-container\">\n            {project.tags.map((label, i) => (\n              <Chip\n                className=\"chip\"\n                size=\"small\"\n                label={label}\n                color=\"primary\"\n                key={i}\n              />\n            ))}\n          </div>\n        </CardContent>\n        <CardActions disableSpacing className=\"card-actions\">\n          <IconButton\n            title=\"More Info\"\n            aria-label=\"More Info\"\n            onClick={handleOpen}\n          >\n            <Info />\n          </IconButton>\n          {modalOpen ? (\n            <InfoModal project={project} handleClose={handleClose} /> // Modal\n          ) : null}\n          <IconButton\n            title=\"Launch App\"\n            aria-label=\"Launch Application\"\n            href={project.links.launch}\n          >\n            <Launch />\n          </IconButton>\n          <IconButton\n            title=\"See Code\"\n            aria-label=\"Source Code On Github\"\n            href={project.links.github}\n          >\n            <GitHub />\n          </IconButton>\n        </CardActions>\n      </Card>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}